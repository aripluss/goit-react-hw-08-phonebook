{"version":3,"file":"static/js/75.47fc1804.chunk.js","mappings":"kVAGaA,EAAaC,EAAAA,GAAAA,KAAH,sGAOVC,EAAcD,EAAAA,GAAAA,MAAH,mFAMXE,EAAcF,EAAAA,GAAAA,MAAH,kXAmBXG,GAAmBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,sGAOhBK,GAAoBL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,kXAmBjBO,GAAqBP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,mD,oJC7ClBS,EAAa,SAAC,GAAmD,IAAD,IAAhDC,SAAAA,OAAgD,MAArC,WAAQ,EAA6B,MAA3BC,aAAAA,OAA2B,SACrEC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAkCvBC,GAAmBC,EAAAA,EAAAA,IAAO,CAC5BC,MAAMC,EAAAA,EAAAA,MAASC,IAAI,EAAG,sCACtBC,OAAOF,EAAAA,EAAAA,MACJG,SAAS,YACTD,MAAM,yBACND,IAAI,EAAG,sCACVG,UAAUJ,EAAAA,EAAAA,MACPG,SAAS,YACTF,IAAI,EAAG,sCACPI,IAAI,GAAI,mCAGb,OACE,4BACE,eAAIC,MAAO,CAAEC,aAAc,QAA3B,SACGd,EAAe,UAAY,aAE9B,SAAC,KAAD,CACEe,cAAe,CAAET,KAAM,GAAIG,MAAO,GAAIE,SAAU,IAChDP,iBAAkBA,EAClBL,SAnCe,SAACiB,EAAQC,GAC5B,IAAQX,EAA0BU,EAA1BV,KAAMG,EAAoBO,EAApBP,MAAOE,EAAaK,EAAbL,SACrBO,QAAQC,IAAI,SAAUH,GAEtB,IAAMI,GAAQ,mBACPpB,GAAgB,CAAEM,KAAAA,IADX,IAEZG,MAAAA,EACAE,SAAAA,IAEFO,QAAQC,IAAI,WAAYC,GACxBrB,EAASqB,GAETH,EAAQI,WACT,EAmBG,UAKE,UAAC,KAAD,WACGrB,EAAe,MACd,iCACE,SAAC,KAAD,CAAasB,QAAQ,OAArB,oBACA,SAAC,KAAD,CACEC,GAAG,OACHC,KAAK,OACLlB,KAAK,OACLmB,YAAY,WAEd,SAAC,KAAD,CAAoBnB,KAAK,OAAOoB,UAAU,YAG9C,SAAC,KAAD,CAAaJ,QAAQ,QAArB,qBACA,SAAC,KAAD,CACEC,GAAG,QACHC,KAAK,QACLlB,KAAK,QACLmB,YAAY,uBAEd,SAAC,KAAD,CAAoBnB,KAAK,QAAQoB,UAAU,SAC3C,SAAC,KAAD,CAAaJ,QAAQ,WAArB,wBACA,SAAC,KAAD,CACEC,GAAG,WACHC,KAAK,WACLlB,KAAK,WACLmB,YAAY,qBAEd,SAAC,KAAD,CAAoBnB,KAAK,WAAWoB,UAAU,SAC9C,UAAC,KAAD,CAAcF,KAAK,SAASG,SAAqB,YAAX1B,EAAtC,UACc,YAAXA,IAAwB,SAAC,IAAD,CAAQ2B,gBAAc,IAC9C5B,EAAe,UAAY,oBAsCvC,C,iKCnIc,SAAS6B,IACtB,IAAMC,GAAa5B,EAAAA,EAAAA,IAAY6B,EAAAA,IACzBC,GAAY9B,EAAAA,EAAAA,IAAY+B,EAAAA,IAExBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHR,GAELI,EAAS,YACV,GAAE,CAACJ,EAAYI,KAEhBI,EAAAA,EAAAA,YAAU,WACJN,GAAWO,EAAAA,GAAAA,MAAY,+BAC5B,GAAE,CAACP,IAMJ,OACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYjC,SANI,SAAC,GAAyB,IAAvBU,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SAC5ByB,GAASI,EAAAA,EAAAA,IAAa,CAAE/B,MAAAA,EAAOE,SAAAA,IAChC,EAIsCX,cAAY,KAE/C,SAAC,KAAD,MAGL,C","sources":["components/Forms/Formik.styled.js","components/SignUpForm/SignUpForm.jsx","pages/SignInPage/SignInPage.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  min-width: 30%;\n`;\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const InputStyled = styled.input`\n  min-height: 35px;\n  width: 100%;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  transition: border-bottom 0.3s ease-in-out;\n  font-size: inherit;\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--accent-color);\n  }\n\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const FormFormikStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  min-width: 30%;\n`;\n\nexport const InputFormikStyled = styled(Field)`\n  min-height: 35px;\n  width: 100%;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  transition: border-bottom 0.3s ease-in-out;\n  font-size: inherit;\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--accent-color);\n  }\n\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  color: var(--red-color);\n`;\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { useSelector } from 'react-redux';\n\nimport { selectStatus } from 'redux/user/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { ButtonStyled } from 'components/Button/Button.styled';\nimport {\n  ErrorMessageStyled,\n  FormFormikStyled,\n  InputFormikStyled,\n  LabelStyled,\n} from 'components/Forms/Formik.styled';\n\nexport const SignUpForm = ({ onSubmit = () => {}, isSignInForm = false }) => {\n  const status = useSelector(selectStatus);\n\n  ///// without Formik /////\n\n  // const nameInputRef = useRef();\n  // const emailInputRef = useRef();\n  // const passwordInputRef = useRef();\n\n  // const handleSubmit = event => {\n  // event.preventDefault();\n  // const formData = {\n  // ...(!isSignInForm && { name: nameInputRef.current.value }),\n  // email: emailInputRef.current.value,\n  // password: passwordInputRef.current.value,\n  // };\n  // onSubmit(formData);\n  // event.target.reset();\n  // };\n\n  const handleSubmit = (values, actions) => {\n    const { name, email, password } = values;\n    console.log('values', values);\n\n    const formData = {\n      ...(!isSignInForm && { name }),\n      email,\n      password,\n    };\n    console.log('formData', formData);\n    onSubmit(formData);\n\n    actions.resetForm();\n  };\n\n  let validationSchema = object({\n    name: string().min(2, 'Must be at least 2 characters long'),\n    email: string()\n      .required('Required')\n      .email('Must be a valid email')\n      .min(2, 'Must be at least 2 characters long'),\n    password: string()\n      .required('Required')\n      .min(6, 'Must be at least 6 characters long')\n      .max(20, 'Must be 20 characters maximum'),\n  });\n\n  return (\n    <div>\n      <h2 style={{ marginBottom: '40px' }}>\n        {isSignInForm ? 'Sign in' : 'Sign up'}\n      </h2>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <FormFormikStyled>\n          {isSignInForm ? null : (\n            <>\n              <LabelStyled htmlFor=\"name\">Name:</LabelStyled>\n              <InputFormikStyled\n                id=\"name\"\n                type=\"name\"\n                name=\"name\"\n                placeholder=\"Iryna\"\n              />\n              <ErrorMessageStyled name=\"name\" component=\"div\" />\n            </>\n          )}\n          <LabelStyled htmlFor=\"email\">Email:</LabelStyled>\n          <InputFormikStyled\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"example@gmail.com\"\n          />\n          <ErrorMessageStyled name=\"email\" component=\"div\" />\n          <LabelStyled htmlFor=\"password\">Password:</LabelStyled>\n          <InputFormikStyled\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"***************\"\n          />\n          <ErrorMessageStyled name=\"password\" component=\"div\" />\n          <ButtonStyled type=\"submit\" disabled={status === 'pending'}>\n            {status === 'pending' && <Loader isButtonLoader />}\n            {isSignInForm ? 'Sign in' : 'Sign up'}\n          </ButtonStyled>\n        </FormFormikStyled>\n      </Formik>\n    </div>\n\n    ///// without Formik /////\n\n    // <>\n    //   <h2 style={{ marginBottom: '40px' }}>\n    //     {isSignInForm ? 'Sign in' : 'Sign up'}\n    //   </h2>\n    //   <FormStyled onSubmit={handleSubmit}>\n    //     {isSignInForm ? null : (\n    //       <>\n    //         <LabelStyled htmlFor=\"name\">Name:</LabelStyled>\n    //         <InputStyled id=\"name\" type=\"name\" name=\"name\" ref={nameInputRef} />\n    //       </>\n    //     )}\n\n    //     <LabelStyled htmlFor=\"email\">Email:</LabelStyled>\n    //     <InputStyled id=\"email\" type=\"email\" name=\"email\" ref={emailInputRef} />\n\n    //     <LabelStyled htmlFor=\"password\">Password:</LabelStyled>\n    //     <InputStyled\n    //       id=\"password\"\n    //       type=\"password\"\n    //       name=\"password\"\n    //       ref={passwordInputRef}\n    //     />\n\n    //     <ButtonStyled type=\"submit\" disabled={status === 'pending'}>\n    //       {status === 'pending' && <Loader isButtonLoader />}\n    //       {isSignInForm ? 'Sign in' : 'Sign up'}\n    //     </ButtonStyled>\n    //   </FormStyled>\n    // </>\n  );\n};\n\nSignUpForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  isSignInForm: PropTypes.bool,\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast, Toaster } from 'react-hot-toast';\n\nimport { selectAuthError, selectIsLoggedIn } from 'redux/user/selectors';\nimport { loginRequest } from 'redux/user/operations';\nimport { SignUpForm } from 'components/SignUpForm/SignUpForm';\n\nimport { ContainerStyled } from 'components/Container/Container.styled';\n\nexport default function SignInPage() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const errorUser = useSelector(selectAuthError);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n\n    navigate('/contacts');\n  }, [isLoggedIn, navigate]);\n\n  useEffect(() => {\n    if (errorUser) toast.error('Incorrect login information.');\n  }, [errorUser]);\n\n  const handleLogin = ({ email, password }) => {\n    dispatch(loginRequest({ email, password }));\n  };\n\n  return (\n    <ContainerStyled>\n      <SignUpForm onSubmit={handleLogin} isSignInForm />\n\n      <Toaster />\n    </ContainerStyled>\n  );\n}\n"],"names":["FormStyled","styled","LabelStyled","InputStyled","FormFormikStyled","Form","InputFormikStyled","Field","ErrorMessageStyled","ErrorMessage","SignUpForm","onSubmit","isSignInForm","status","useSelector","selectStatus","validationSchema","object","name","string","min","email","required","password","max","style","marginBottom","initialValues","values","actions","console","log","formData","resetForm","htmlFor","id","type","placeholder","component","disabled","isButtonLoader","SignInPage","isLoggedIn","selectIsLoggedIn","errorUser","selectAuthError","navigate","useNavigate","dispatch","useDispatch","useEffect","toast","loginRequest"],"sourceRoot":""}