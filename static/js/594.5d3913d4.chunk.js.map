{"version":3,"file":"static/js/594.5d3913d4.chunk.js","mappings":"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","sources":["components/Forms/Formik.styled.js","HOC/WithAuthRedirect.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  min-width: 30%;\n`;\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const InputStyled = styled.input`\n  width: 100%;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  transition: border-bottom 0.3s ease-in-out;\n  font-size: 16px;\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--accent-color);\n  }\n\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const FormFormikStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  min-width: 30%;\n`;\n\nexport const InputFormikStyled = styled(Field)`\n  width: 100%;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  transition: border-bottom 0.3s ease-in-out;\n  font-size: 16px;\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--accent-color);\n  }\n\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  color: var(--red-color);\n`;\n","import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { selectIsLoggedIn } from 'redux/user/selectors';\n\nfunction WithAuthRedirect(Component, navigateTo) {\n  const ComponentWithRedirect = props => {\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n\n    return isLoggedIn ? <Component {...props} /> : <Navigate to={navigateTo} />;\n  };\n\n  return ComponentWithRedirect;\n}\n\nexport default WithAuthRedirect;\n","export const selectFilter = state => state.filterData.filter;\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contactsData.contacts.items;\nexport const selectIsLoading = state => state.contactsData.contacts.isLoading;\nexport const selectError = state => state.contactsData.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast, Toaster } from 'react-hot-toast';\n\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { saveContactRequest } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\n\nimport {\n  FormStyled,\n  InputStyled,\n  LabelStyled,\n} from 'components/Forms/Formik.styled';\nimport { ButtonStyled } from 'components/Button/Button.styled';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    addNewContact({\n      name: name.trim(),\n      number,\n    });\n\n    reset();\n  };\n\n  const addNewContact = newContact => {\n    const repeatedContactName = contacts.some(\n      existingContact =>\n        existingContact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    const repeatedContactNumber = contacts.some(\n      existingContact => existingContact.number === newContact.number\n    );\n\n    if (repeatedContactName) {\n      toast.error(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    if (repeatedContactNumber) {\n      toast.error(\n        `There is already a contact with number ${newContact.number} in your phone book.`\n      );\n      return;\n    }\n\n    dispatch(saveContactRequest(newContact));\n  };\n\n  return (\n    <div className=\"form-container\">\n      <FormStyled onSubmit={handleSubmit}>\n        <LabelStyled className=\"label\">\n          Name\n          <InputStyled\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder=\"Enter a contact name\"\n            value={name}\n            onChange={handleInputChange}\n          />\n        </LabelStyled>\n        <LabelStyled className=\"label\">\n          Number\n          <InputStyled\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder=\"Enter a contact number\"\n            value={number}\n            onChange={handleInputChange}\n          />\n        </LabelStyled>\n        <ButtonStyled type=\"submit\" className=\"button\">\n          {isLoading && <Loader isButtonLoader />}\n          Add contact\n        </ButtonStyled>\n      </FormStyled>\n\n      <Toaster />\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const StyledContact = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  justify-content: space-between;\n`;\n\nexport const StyledContactName = styled.p`\n  word-break: break-word;\n`;\n\nexport const StyledContactNumber = styled.span`\n  display: block;\n\n  @media screen and (min-width: 768px) {\n    display: inline-block;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { AiOutlineUserDelete } from 'react-icons/ai';\n\nimport { removeContactRequest } from 'redux/contacts/operations';\n\nimport {\n  StyledContact,\n  StyledContactName,\n  StyledContactNumber,\n} from './ContactListItem.styled';\nimport { ButtonCancelStyled } from 'components/Button/Button.styled';\n\nexport const ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const deleteExistingContact = contactId => {\n    dispatch(removeContactRequest(contactId));\n  };\n\n  return (\n    <>\n      <StyledContact>\n        <StyledContactName>\n          {name}:{' '}\n          <StyledContactNumber>\n            <a href={'tel:' + number.split('-').join('').split(' ').join('')}>\n              {number}\n            </a>\n          </StyledContactNumber>\n        </StyledContactName>\n        <ButtonCancelStyled\n          type=\"button\"\n          onClick={() => deleteExistingContact(id)}\n        >\n          Delete contact\n          <AiOutlineUserDelete size={25} color={'var(--red-color)'} />\n        </ButtonCancelStyled>\n      </StyledContact>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const StyledDiv = styled.div`\n  padding: 20px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  text-align: center;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nimport { StyledContactList, StyledDiv } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {visibleContacts.length === 0 ? (\n        <StyledDiv>\n          There are no matching contacts in your phone book.\n        </StyledDiv>\n      ) : (\n        <StyledContactList>\n          {visibleContacts.map(contact => (\n            <ContactListItem key={contact.id} {...contact} />\n          ))}\n        </StyledContactList>\n      )}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nimport { InputStyled, LabelStyled } from 'components/Forms/Formik.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <LabelStyled className=\"label\">\n      Find contacts by name:\n      <InputStyled\n        className=\"input\"\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        placeholder=\"Who are you looking for?\"\n        onChange={handleFilter}\n      />\n    </LabelStyled>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast, Toaster } from 'react-hot-toast';\n\nimport WithAuthRedirect from 'HOC/WithAuthRedirect';\nimport { selectIsLoggedIn } from 'redux/user/selectors';\nimport { selectContacts, selectError } from 'redux/contacts/selectors';\nimport { fetchContactsRequest } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { ContainerStyled } from 'components/Container/Container.styled';\nimport { StyledDiv } from 'components/ContactList/ContactList.styled';\n\nfunction ContactsPage() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const contacts = useSelector(selectContacts);\n  const errorContacts = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n\n    dispatch(fetchContactsRequest());\n  }, [dispatch, isLoggedIn]);\n\n  useEffect(() => {\n    if (errorContacts) toast.error(errorContacts);\n  }, [errorContacts]);\n\n  return (\n    <>\n      <ContainerStyled>\n        <h2 style={{ marginBottom: '40px' }}>Contacts</h2>\n        <div className=\"main-container\">\n          <ContactForm />\n          {!contacts.length ? (\n            <StyledDiv>There are no contacts in your phone book.</StyledDiv>\n          ) : (\n            <div className=\"sub-container\">\n              <Filter />\n              <ContactList />\n            </div>\n          )}\n        </div>\n      </ContainerStyled>\n\n      <Toaster />\n    </>\n  );\n}\n\nexport default WithAuthRedirect(ContactsPage, '/');\n"],"names":["FormStyled","styled","LabelStyled","InputStyled","FormFormikStyled","Form","InputFormikStyled","Field","ErrorMessageStyled","ErrorMessage","Component","navigateTo","props","useSelector","selectIsLoggedIn","to","selectFilter","state","filterData","filter","selectContacts","contactsData","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useState","setName","number","setNumber","handleInputChange","event","target","value","addNewContact","newContact","repeatedContactName","some","existingContact","repeatedContactNumber","toast","saveContactRequest","className","onSubmit","preventDefault","trim","type","pattern","title","required","placeholder","onChange","Loader","isButtonLoader","StyledContact","StyledContactName","StyledContactNumber","ContactListItem","id","href","split","join","onClick","contactId","removeContactRequest","size","color","StyledContactList","StyledDiv","ContactList","visibleContacts","length","map","Filter","setFilter","WithAuthRedirect","isLoggedIn","errorContacts","useEffect","fetchContactsRequest","style","marginBottom"],"sourceRoot":""}